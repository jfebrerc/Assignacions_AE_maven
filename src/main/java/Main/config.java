/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.awt.Color;
import Biblioteques.*;
import java.io.*;
import java.awt.Font;
import javax.swing.UIManager;
import java.awt.Component;
import java.awt.Container;
import java.awt.GraphicsEnvironment;
import javax.swing.JOptionPane;
import javax.swing.colorchooser.ColorSelectionModel;


/**
 *
 * @author Usuari
 */
public class config extends javax.swing.JFrame {

    /**
     * Creates new form config
     */
    public static String path_conf = Auxiliar.path + "conf.txt";
    public config() {
        initComponents();
        setLocationRelativeTo(null);
        //getContentPane().setBackground(Color.RED);
        setTitle("Menu principal");
        //getContentPane().setFont(new Font("Arial", Font.BOLD, 20));
        //setUIFont(new Font("Arial", Font.BOLD, 20));
        String fonts[]  = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();

        for (int i = 0; i < fonts.length; i++) {
            //System.out.println(fonts[i]);
            seleccio_font.addItem(fonts[i]);
        }
        try{
            getContentPane().setBackground(Color.decode(carregarConf()[0]));
        }catch (Exception e){
            IO.imprimirTI("Error al asignar color: " + e);
        }
        for(int i=6; i<31; i++){
           seleccio_mida.addItem(Integer.toString(i));
        }  
        //seleccio_mida.setSelectedIndex(10);
        try{
            seleccio_font.setSelectedItem(carregarConf()[1]);
            seleccio_tipus.setSelectedIndex(Integer.valueOf(carregarConf()[2]));
            seleccio_mida.setSelectedItem(carregarConf()[3]);            
        }catch (Exception e){
            IO.imprimirTI("Error al carregar conf de fonts: " + e);
        }
        
        try{
            Component[] components1=getContentPane().getComponents();
            setUIFont(new Font(carregarConf()[1], Integer.valueOf(carregarConf()[2]), Integer.valueOf(carregarConf()[3])), components1);            
        }catch(Exception e){
            IO.imprimirTI("Error al carregar la font: " + e);
        }
        try{
           jcolor.setColor(Color.decode(carregarConf()[0]));   
        }catch (Exception e){
          IO.imprimirTI("Error al carregar el color al formulari: " + e);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcolor = new javax.swing.JColorChooser();
        seleccionar = new javax.swing.JButton();
        enrereButton = new javax.swing.JButton();
        seleccio_font = new javax.swing.JComboBox<>();
        seleccio_tipus = new javax.swing.JComboBox<>();
        seleccio_mida = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CONFIGURACIO");

        seleccionar.setText("Guardar");
        seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarActionPerformed(evt);
            }
        });

        enrereButton.setText("Enrere");
        enrereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrereButtonActionPerformed(evt);
            }
        });

        seleccio_font.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        seleccio_tipus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plano", "Negreta", "Cursiva" }));

        seleccio_mida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcolor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seleccionar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(enrereButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(285, 285, 285)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(seleccio_font, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seleccio_tipus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seleccio_mida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jcolor, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seleccio_font, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccio_tipus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccio_mida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(seleccionar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enrereButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void seleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarActionPerformed
        //IO.imprimirTI("Color: " + jcolor.getColor());
        /*Color c2 = Color.RED;
        try{
            c2 = Color.decode(carregarConf());
        }catch (Exception e){
            IO.imprimirTI("Error carregarconf: " + e);
        }*/
        
        int r = jcolor.getColor().getRed();
        int g = jcolor.getColor().getGreen();
        int b = jcolor.getColor().getBlue();
        String hex = String.format("#%02x%02x%02x", r, g, b);  
        IO.imprimirTI("color getRGB: " + hex);
        try{
           guardarConf(hex);
           this.getContentPane().setBackground(Color.decode(carregarConf()[0]));
           Component[] components1=getContentPane().getComponents();
           setUIFont(new Font(carregarConf()[1], Integer.valueOf(carregarConf()[2]), Integer.valueOf(carregarConf()[3])), components1);
           JOptionPane.showMessageDialog(this, "Configuracio guardada correctament");
        }catch (Exception e){
            
        }
        
        //this.getContentPane().setBackground(c2);
    }//GEN-LAST:event_seleccionarActionPerformed

    private void enrereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrereButtonActionPerformed
        this.setVisible(false);
        main m = new main();
        m.setVisible(true);
    }//GEN-LAST:event_enrereButtonActionPerformed
    public void guardarConf(String color)throws Exception{
         try{
            int a = Integer.valueOf(seleccio_mida.getSelectedItem().toString());
            FileWriter saveFile = new FileWriter(path_conf);
            saveFile.write(color+"\n");
            saveFile.write(seleccio_font.getSelectedItem().toString()+"\n");
            saveFile.write(Integer.toString(seleccio_tipus.getSelectedIndex())+"\n");
            saveFile.write(Integer.toString(a));
            //IO.imprimirTI("Color guardat: " + color);
            saveFile.close();  
         }catch (Exception e){
            IO.imprimirTI("error: " + e);
         } 
    }
    
    public static String [] carregarConf() throws Exception{
        BufferedReader saveFile= new BufferedReader(new FileReader(path_conf));
        String color = saveFile.readLine(); 
        String lletra = saveFile.readLine();
        String tipus_lletra = saveFile.readLine();
        String mida_lletra = saveFile.readLine();
        
        String configuracio [] = {color, lletra, tipus_lletra, mida_lletra};
        //IO.imprimirTI("Lletra: " + lletra);
        saveFile.close();
        //IO.imprimirTI("" + color);
        return configuracio;
    }
    
    public static void setUIFont(Font f, Component[] components1){
        //Component[] components1=getContentPane().getComponents();
           
        for(int i=0;i<components1.length;i++){
          components1[i].setFont(f);
 
          Container c=(Container)components1[i];
          Component[] components2=c.getComponents();
           
            for(int j=0;j<components2.length;j++){
                components2[j].setFont(f);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new config().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enrereButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JColorChooser jcolor;
    private javax.swing.JComboBox<String> seleccio_font;
    private javax.swing.JComboBox<String> seleccio_mida;
    private javax.swing.JComboBox<String> seleccio_tipus;
    private javax.swing.JButton seleccionar;
    // End of variables declaration//GEN-END:variables
}
